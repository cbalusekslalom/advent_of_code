****&&&&!!!!****&&&&!! !!****&&&&!!!!**** &&&&!!!!****&&&& ****&&&&!!!!**** &&&&!!!!****
0010000001010100011011 ----10110000000
__^__^^______________^
 v1.0.0.5403[

                       __^__^^__________^ __^__^^____^____ __^__^^____^____ __^__^^____! __^__^^______________^
                        v1.0.1.2 [         v2.4.L206        v0.4.70       ]  v4.4.E       v0.5.0.154[
                                                                                                                0010011011110011010111110110100100010110010100100011010011000110011101000110110001000000000111010001111010000000001001110010010111011010010110111010001011

 def recursive_input_function(inp_list)
    version = inp_list[:3]
    type = inp_list[3:6]
    if type == '100':
        bin_string = ''
        i = 0
        while inp_list[6+i*5] != 0:
             bin_string += inp_list[6+i*5:6+i*5+4]
             i += 1
        bin_string += inp_list[6+i*5:6+i*5+4]
        return int('0b'+bin_string)
        # check the 6th, then the 11th, then the 16th, then the 21st, 26th, 31st...
    else:
        check_val = inp_list[6]
        if check_val == 0:
            binary_number = inp_list[7:22]
            counter = int('0b'+binary_number)
            while counter > 0:
                inp_list
                counter -= 1
        elif check_val == 1:
            binary_number = inp_list[7:18]
        else:
            return ValueError()
    return inp_list

 given two letters: can determine version, operator/literal: 6 of 8
 if operator, need to check pos 7 for how many letters to add 3 or 4.

